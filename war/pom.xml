<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.jenkins-ci.main</groupId>
    <artifactId>pom</artifactId>
    <version>1.625.3</version>
    <relativePath />
  </parent>

  <groupId>io.jenkins.blueocean</groupId>
  <artifactId>blueocean-war</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>war</packaging>

  <name>Blue Ocean WAR</name>

  <properties>
    <JENKINS_HOME>${basedir}/work</JENKINS_HOME>
    <contextPath>/jenkins</contextPath><!-- context path during test -->
    <port>8080</port><!-- HTTP listener port -->
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <project.build.outputEncoding>UTF-8</project.build.outputEncoding>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.jenkins-ci.main</groupId>
      <artifactId>jenkins-war</artifactId>
      <version>${project.parent.version}</version>
      <type>war</type>
    </dependency>

    <dependency><!-- this is for auto-completion in init.groovy editing -->
      <groupId>org.jenkins-ci.main</groupId>
      <artifactId>jenkins-core</artifactId>
      <version>${project.parent.version}</version>
      <scope>provided</scope>
    </dependency>

    <!-- bundled plugins, sort by groupId then artifactId -->
    <dependency>
      <groupId>io.jenkins.blueocean</groupId>
      <artifactId>blueocean-commons</artifactId>
      <version>${project.version}</version>
      <type>hpi</type>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>io.jenkins.blueocean</groupId>
      <artifactId>blueocean-security-api</artifactId>
      <version>${project.version}</version>
      <type>hpi</type>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>io.jenkins.blueocean</groupId>
      <artifactId>pipeline-service-api</artifactId>
      <version>${project.version}</version>
      <type>hpi</type>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>io.jenkins.blueocean</groupId>
      <artifactId>profile-service-api</artifactId>
      <version>${project.version}</version>
      <type>hpi</type>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>io.jenkins.blueocean</groupId>
      <artifactId>blueocean-rest</artifactId>
      <version>${project.version}</version>
      <type>hpi</type>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>io.jenkins.blueocean</groupId>
      <artifactId>embedded-driver</artifactId>
      <version>${project.version}</version>
      <type>hpi</type>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>servlet-api</artifactId>
      <version>2.4</version>
      <scope>provided</scope>
    </dependency>
  </dependencies>

  <build>
    <finalName>blueocean</finalName>
    <plugins>
      <plugin>
        <artifactId>maven-clean-plugin</artifactId>
        <configuration>
          <filesets>
            <fileset>
              <directory>overlays</directory>
              <includes>
                <include>**</include>
              </includes>
            </fileset>
          </filesets>
        </configuration>
      </plugin>

      <plugin>
        <artifactId>maven-enforcer-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <requireMavenVersion>
                  <version>3.0.3</version>
                </requireMavenVersion>
                <enforceBytecodeVersion>
                  <maxJdkVersion>1.${java.level}</maxJdkVersion>
                  <ignoreClasses>
                    <ignoreClass>org.eclipse.jetty.spdy.*</ignoreClass>
                  </ignoreClasses>
                </enforceBytecodeVersion>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <artifactId>maven-release-plugin</artifactId>
        <version>2.5.2</version>
        <configuration>
          <mavenExecutorId>forked-path</mavenExecutorId>
          <useReleaseProfile>false</useReleaseProfile>
          <arguments>-Prelease,sign</arguments>
          <goals>-DskipTests javadoc:javadoc animal-sniffer:check deploy javadoc:aggregate</goals>
          <pushChanges>true</pushChanges>
          <localCheckout>true</localCheckout>
        </configuration>
      </plugin>

      <plugin>
        <artifactId>maven-war-plugin</artifactId>
        <version>2.6</version>
        <configuration>
          <filteringDeploymentDescriptors>true</filteringDeploymentDescriptors>
          <webResources>
            <resource>
              <directory>${project.build.directory}/generated-resources</directory>
            </resource>
          </webResources>
          <!-- for putting Main-Class into war -->
          <archive>
            <manifest>
              <mainClass>Main</mainClass>
            </manifest>
            <manifestEntries>
              <Implementation-Version>${project.version}</Implementation-Version>
            </manifestEntries>
          </archive>
          <!--outputFileNameMapping>@{artifactId}@.@{extension}@</outputFileNameMapping-->
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>1.9.1</version>
        <executions>
          <execution>
            <id>package</id>
            <phase>package</phase>
            <goals>
              <goal>attach-artifact</goal>
            </goals>
            <configuration>
              <artifacts>
                <artifact>
                  <file>${project.build.directory}/${project.build.finalName}.war</file>
                  <type>jar</type>
                  <!-- deploy the war as a jar, so that the tests can pull this into the classpath -->
                  <classifier>war-for-test</classifier>
                </artifact>
              </artifacts>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.jenkins-ci.tools</groupId>
        <artifactId>maven-hpi-plugin</artifactId>
        <version>1.115</version>
        <executions>
          <execution>
            <goals>
              <goal>bundle-plugins</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/generated-resources/WEB-INF/plugins/</outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <!-- sign war -->
      <id>sign</id>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-jarsigner-plugin</artifactId>
            <version>1.4</version>
            <executions>
              <!-- sign the war -->
              <execution>
                <id>signWar</id>
                <phase>verify</phase>
                <goals>
                  <goal>sign</goal>
                </goals>
                <configuration>
                  <!--
                    during the development, debug profile defined in ../pom.xml will cause
                    the jars to be signed by a self-certified dummy public key.

                    For release, you should define the real values in ~/.m2/settings.xml
                  -->
                  <alias>${hudson.sign.alias}</alias>
                  <keystore>${hudson.sign.keystore}</keystore>
                  <storepass>${hudson.sign.storepass}</storepass>
                  <keypass>${hudson.sign.keypass}</keypass>
                  <removeExistingSignatures>true</removeExistingSignatures>
                  <processAttachedArtifacts>false</processAttachedArtifacts>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>interactive</id>
      <properties>
        <vm.args />
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>versions-maven-plugin</artifactId>
            <version>2.2</version>
            <executions>
              <execution>
                <phase>validate</phase>
                <goals>
                  <goal>display-dependency-updates</goal>
                </goals>
                <configuration>
                  <allowSnapshots>false</allowSnapshots>
                  <processDependencyManagement>false</processDependencyManagement>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>1.4.0</version>
            <executions>
              <execution>
                <id>run</id>
                <phase>verify</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <executable>java</executable>
                  <commandlineArgs>
                    ${vm.args} -jar ${project.build.directory}/${project.build.finalName}.war --prefix=${contextPath}
                  </commandlineArgs>
                  <environmentVariables>
                    <JENKINS_HOME>${JENKINS_HOME}</JENKINS_HOME>
                  </environmentVariables>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
