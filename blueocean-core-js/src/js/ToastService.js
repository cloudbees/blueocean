/**
 * Created by cmeyers on 8/18/16.
 */
import { observable, computed } from 'mobx';

/**
 * Holds one or more toasts in state for display in UI.
 */
export class ToastService {

    @observable toasts = [];

    /**
     * Creates a new toast that is added to the list.
     *
     * @param toast object with the following shape:
     * {
     *  text: string, message text to display
     *  action: string, text for action link
     *  onActionClick: function, callback to invoke when action link is clicked
     *  onDismiss: function, callback to invoke when toast is dismissed (immediately, or after timeout)
     *  dismissDelay: number, duration in millis after which to auto-dismiss this Toast
     *  id: unique identifier (optional, will be autogenerated if ommitted)
     * }
     * @returns {number} unique ID of toast
     */
    newToast(toast) {
        if (!toast.id) {
            toast.id = Math.random() * Math.pow(10, 16);
        }

        // TODO: determine why it's necessary to re-set the "toasts" field to trigger the UI update
        const copy = this.toasts.slice();
        copy.push(toast);
        this.toasts = copy;

        return toast.id;
    }

    /**
     * Removes a toast with the matching value of toast.id.
     *
     * @param toast
     */
    removeToast(toast) {
        this.toasts = this.toasts.filter((item) => {
            return toast.id !== item.id;
        });
    }

    @computed
    get count() {
        return this.toasts ? this.toasts.length : 0;
    }

}
